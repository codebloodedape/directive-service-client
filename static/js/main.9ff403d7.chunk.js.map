{"version":3,"sources":["pages/home/home.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["URL_BASE","serverConfig","host","HomePage","props","authenticate","fetch","method","headers","then","res","ok","json","setState","token","selectedNodeId","getData","unauthenticate","state","selectedFolder","id","name","children","map","child","itemClicked","item","addItemSelected","backClicked","addItemClicked","newItemName","newItemTextField","current","focus","addItemSaveClicked","body","JSON","stringify","addItemCancelClicked","onNewItemNameChange","e","target","value","rootClicked","deleteItemClicked","this","React","createRef","addButton","container","length","className","onClick","stopPropagation","push","ref","type","onFocus","event","select","onChange","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ff403d7.chunk.js","sourcesContent":["import React from 'react'\nimport serverConfig from '../../config/server.json'\nimport './home.css'\n// import cx from 'classnames'\n// import PropTypes from 'prop-types']\nconst URL_BASE = serverConfig.host\n\nclass HomePage extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            selectedFolder: {\n                name: 'root',\n                // id: 'root',\n                children: []\n            },\n            // items: [],\n            selectedNodeId: '',\n            addItemSelected: false,\n            newItemName: 'New Folder',\n            token: ''\n            // lastNodeId: ''\n        }\n    }\n\n    componentDidMount() {\n        this.authenticate()\n        this.newItemTextField = React.createRef();\n        // this.getData()\n    }\n\n    // componentWillUnmount() {\n    //     this.unauthenticate()\n    // }\n\n\n    authenticate = () => {\n        fetch(URL_BASE + '/login', {\n            method: 'GET',\n            // body: JSON.stringify(\n            //     {\n            //         \"username\": 'reactapp',\n            //     }\n            // ),\n            headers: {\n                \"username\": 'reactapp',\n            },\n        })\n            .then(res => {\n                if (!res.ok) {\n                    // TODO Display error\n                    return null\n                }\n                else {\n                    return res.json()\n                }\n            })\n            .then(\n                res => {\n                    this.setState({\n                        token: res.token,\n                        selectedNodeId: 'root'\n                    }, () => {\n                        this.getData()\n                    })\n                }\n            )\n    }\n\n    unauthenticate = () => {\n        fetch(URL_BASE + '/logout', {\n            method: 'GET',\n            headers: {\n                \"token\": this.state.token,\n            },\n        })\n        // .then(res => res.json())\n        // .then(\n        //     res => { }\n        // )\n        // TODO handle ?\n    }\n\n    getData = () => {\n        fetch(URL_BASE + '/folder/' + this.state.selectedNodeId, {\n            method: 'GET',\n            // body: JSON.stringify({\n            //     \"token\": this.state.token\n            // }),\n            headers: {\n                'token': this.state.token\n            },\n            // headers: {\n            //     'Content-Type': 'application/json'\n            // },\n        })\n            .then(res => {\n                if (!res.ok) {\n                    // TODO make this condition only for response code 403\n                    this.authenticate()\n                    return null\n                }\n                else {\n                    return res.json()\n                }\n            })\n            // .then(res => res.json())\n            .then(\n                res => {\n\n                    // res = res.json()\n                    if (res) {\n                        // const children = res.children\n                        const selectedFolder = {\n                            id: res.id,\n                            name: res.name,\n                            children: res.children.map(child => {\n                                return {\n                                    id: child.id,\n                                    name: child.name\n                                }\n                            })\n                        }\n                        this.setState({ selectedFolder })\n                    }\n                }\n            )\n        // .then(res => res.json())\n        // .catch()\n    }\n\n    itemClicked = (item) => {\n        this.setState({\n            // lastNodeId: this.state.selectedNodeId,\n            selectedNodeId: item.id,\n            addItemSelected: false\n        }, () => {\n            this.getData()\n        })\n    }\n\n    backClicked = () => {\n        // console.log(this.state.selectedNodeId)\n        this.setState({\n\n        })\n    }\n\n    addItemClicked = () => {\n        this.setState({\n            addItemSelected: true,\n            newItemName: 'New Folder'\n        }, () => {\n            this.newItemTextField.current.focus()\n        })\n    }\n\n    addItemSaveClicked = () => {\n        this.setState({\n            addItemSelected: false\n        }, () => {\n            fetch(URL_BASE + '/folder', {\n                method: 'PUT',\n                body: JSON.stringify(\n                    {\n                        \"folderRequest\": {\n                            \"name\": this.state.newItemName,\n                            \"parentId\": this.state.selectedNodeId\n                        }\n                    }\n                ),\n                headers: {\n                    'Content-Type': 'application/json',\n                    'token': this.state.token\n                },\n            })\n\n                .then(res => {\n                    if (!res.ok) {\n                        // TODO make this condition only for response code 403\n                        this.authenticate()\n                        return null\n                    }\n                    else {\n                        // return res.json()\n                        this.getData()\n                    }\n                })\n        })\n    }\n\n    addItemCancelClicked = () => {\n        this.setState({\n            newItemName: 'New Folder',\n            addItemSelected: false\n        })\n    }\n\n    onNewItemNameChange = (e) => {\n        this.setState({\n            newItemName: e.target.value\n        })\n    }\n\n    rootClicked = () => {\n        this.setState({\n            selectedNodeId: 'root',\n            addItemSelected: false\n        }, () => {\n            this.getData()\n        })\n    }\n\n    deleteItemClicked = (item) => {\n        fetch(URL_BASE + '/folder/' + item.id, {\n            method: 'DELETE',\n            body: JSON.stringify({\n                \"folderRequest\": {\n                    \"parentId\": this.state.selectedNodeId\n                }\n            }),\n            headers: {\n                'Content-Type': 'application/json',\n                'token': this.state.token\n            },\n        })\n\n            .then(res => {\n                if (!res.ok) {\n                    // TODO make this condition only for response code 403\n                    this.authenticate()\n                    return null\n                }\n                else {\n                    // return res.json()\n                    this.getData()\n                }\n            })\n    }\n\n    render() {\n        // console.log(this.state.items)\n        let container = [] //'This folder is empty'\n        let body = 'This folder is empty'\n        if (this.state.selectedFolder.children.length > 0) {\n            container = this.state.selectedFolder.children.map(item => {\n                return (\n                    <div className='item' onClick={() => this.itemClicked(item)}>\n                        <div className='itemText'>{item.name}</div>\n                        {\n                            (item.id !== 'root') ? <div className='deleteButton' onClick={(e) => { e.stopPropagation(); this.deleteItemClicked(item) }}></div> : ''\n                        }\n                    </div>\n                )\n            })\n        }\n\n        let addButton\n        if (this.state.selectedNodeId !== '') {\n            addButton = <div className='footer'><div className='addButton' onClick={this.addItemClicked}>Add a folder</div></div>\n        }\n        // let newItemSection\n        if (this.state.addItemSelected) {\n            container.push(\n                <div className='addItemSection'>\n                    <input ref={this.newItemTextField} className='addItemTextField' type='text' onFocus={(event) => event.target.select()}\n                        value={this.state.newItemName} onChange={this.onNewItemNameChange} />\n                    <div className='addItemSaveButton' onClick={this.addItemSaveClicked}></div>\n                    <div className='addItemCancelButton' onClick={this.addItemCancelClicked}></div>\n                </div>\n            )\n        }\n        if (container.length > 0) {\n            body = container\n        }\n        return (\n            <div className='pageContent'>\n                <div className='header'>\n                    <div className='headerLeftButtons'>\n                    <div className='backButton' onClick={this.backClicked}></div>\n                    <div className='rootButton' onClick={this.rootClicked}></div>\n                    </div>\n                    <div className='headerText'>{this.state.selectedFolder.name}</div>\n                </div>\n                <div className='itemsContainer'>\n                    {body}\n                </div>\n                {addButton}\n            </div>\n        )\n    }\n}\nexport default HomePage","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import HomePage from './pages/home/home'\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage></HomePage>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}